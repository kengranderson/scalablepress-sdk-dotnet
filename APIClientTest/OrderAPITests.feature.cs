// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APIClientTest
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OrderAPITestsFeature : object, Xunit.IClassFixture<OrderAPITestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "OrderAPITests.feature"
#line hidden
        
        public OrderAPITestsFeature(OrderAPITestsFeature.FixtureData fixtureData, APIClientTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "OrderAPITests", "\tGenerate Quotes and Place Orders", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "designId",
                        "title",
                        "price"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f187c903c816db29fb1c2",
                        "Harriet Tubman $20 Bill - Red and White (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "next-level-ladies-racerback-tank",
                        "611f18e9067e22268ff24416",
                        "Harriet Tubman $20 Bill - Purple and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f18e3067e22268ff24415",
                        "Harriet Tubman $20 Bill - Blue and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-ladies-t-shirt",
                        "611f18eff411f86da544c887",
                        "Harriet Tubman $20 Bill - Red and White (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-t-shirt",
                        "611f18bd55d0fd020258813a",
                        "Harriet Tubman $20 Bill - Brown and Gold (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f18ccb23a172fe8f86bab",
                        "Blackfacts Heroes - Blue and White (on Black)",
                        "20.00"});
#line 5
 testRunner.Given("the Catalog contains these products", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "size"});
            table3.AddRow(new string[] {
                        "sml"});
            table3.AddRow(new string[] {
                        "med"});
            table3.AddRow(new string[] {
                        "lrg"});
            table3.AddRow(new string[] {
                        "xlg"});
            table3.AddRow(new string[] {
                        "xxl"});
            table3.AddRow(new string[] {
                        "xxxl"});
            table3.AddRow(new string[] {
                        "xxxxl"});
#line 13
 testRunner.And("swag products are available in these sizes", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "color"});
            table4.AddRow(new string[] {
                        "black"});
            table4.AddRow(new string[] {
                        "white"});
#line 22
 testRunner.And("swag products are available in these colors", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "address1",
                        "city",
                        "state",
                        "zip",
                        "country"});
            table5.AddRow(new string[] {
                        "Richard E Witt",
                        "3325 Half and Half Drive",
                        "Corcoran",
                        "CA",
                        "93212",
                        "US"});
            table5.AddRow(new string[] {
                        "Gary R Mendoza",
                        "2840 Harley Vincent Drive",
                        "Mesopotamia",
                        "OH",
                        "44439",
                        "US"});
            table5.AddRow(new string[] {
                        "William M Duvall",
                        "154 Pretty View Lane",
                        "Sebastopol",
                        "CA",
                        "95472",
                        "US"});
            table5.AddRow(new string[] {
                        "Justin R Reeser",
                        "4407 Brooke Street",
                        "Houston",
                        "TX",
                        "77002",
                        "US"});
            table5.AddRow(new string[] {
                        "Brenda F Hart",
                        "1683 Christie Way",
                        "Lexington",
                        "MA",
                        "02173",
                        "US"});
#line 26
 testRunner.And("the address book contains these addresses", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "address1",
                        "city",
                        "state",
                        "zip",
                        "country"});
            table6.AddRow(new string[] {
                        "Blackfacts.com",
                        "60 State St",
                        "Boston",
                        "MA",
                        "02210",
                        "US"});
#line 33
 testRunner.And("custom label from address is", ((string)(null)), table6, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Order from Standard Quote With Single Product")]
        [Xunit.TraitAttribute("FeatureTitle", "OrderAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Order from Standard Quote With Single Product")]
        [Xunit.TraitAttribute("Category", "standardquoteorder")]
        public void GenerateOrderFromStandardQuoteWithSingleProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "standardquoteorder"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Order from Standard Quote With Single Product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 39
 testRunner.Given("1 swag products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.And("the swag quantity ordered is 1 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("1 swag sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("1 swag colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("1 swag addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.When("a Standard Quote is generated with this swag data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then("the result should contain a new Order Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
 testRunner.And("when the Order Token is used to place an Order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then("and Order Id should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Order from Bulk Quote With Multiple Products To Same Address")]
        [Xunit.TraitAttribute("FeatureTitle", "OrderAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Order from Bulk Quote With Multiple Products To Same Address")]
        [Xunit.TraitAttribute("Category", "bulkquoteorder")]
        public void GenerateOrderFromBulkQuoteWithMultipleProductsToSameAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "bulkquoteorder"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Order from Bulk Quote With Multiple Products To Same Address", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 51
 testRunner.Given("5 swag products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
 testRunner.And("the swag quantity ordered is 2 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("5 swag sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("2 swag colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("1 swag addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.When("a Bulk Quote is generated with this swag data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("the result should contain a new Order Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.And("when the Order Token is used to place an Order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.Then("and Order Id should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OrderAPITestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OrderAPITestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
