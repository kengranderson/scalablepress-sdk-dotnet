// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APIClientTest
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class QuoteAPITestsFeature : object, Xunit.IClassFixture<QuoteAPITestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "QuoteAPITests.feature"
#line hidden
        
        public QuoteAPITestsFeature(QuoteAPITestsFeature.FixtureData fixtureData, APIClientTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "QuoteAPITests", "\tTest the ScalablePress Quote API", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "designId",
                        "title",
                        "price"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f187c903c816db29fb1c2",
                        "Harriet Tubman $20 Bill - Red and White (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "next-level-ladies-racerback-tank",
                        "611f18e9067e22268ff24416",
                        "Harriet Tubman $20 Bill - Purple and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f18e3067e22268ff24415",
                        "Harriet Tubman $20 Bill - Blue and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-ladies-t-shirt",
                        "611f18eff411f86da544c887",
                        "Harriet Tubman $20 Bill - Red and White (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-t-shirt",
                        "611f18bd55d0fd020258813a",
                        "Harriet Tubman $20 Bill - Brown and Gold (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f18ccb23a172fe8f86bab",
                        "Blackfacts Heroes - Blue and White (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "next-level-ladies-racerback-tank",
                        "611f18cf2f2dfc02091fb222",
                        "Blackfacts Heroes - Purple and Gold (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-t-shirt",
                        "611f1880731e042a41bfe5c3",
                        "Harriet Tubman $20 Bill - White and Black (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f191146cbf22c39671391",
                        "Blackfacts Heroes - Pink and Green (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-t-shirt",
                        "611f18fe2f2dfc02091fb225",
                        "Blackfacts Heroes - Blue and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-ladies-t-shirt",
                        "611f18e9067e22268ff24416",
                        "Harriet Tubman $20 Bill - Purple and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "next-level-ladies-racerback-tank",
                        "611f1900903c816db29fb1e6",
                        "Blackfacts Heroes - Blue and White (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "next-level-ladies-racerback-tank",
                        "611f190e067e22268ff2441c",
                        "Blackfacts Heroes - Black and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "next-level-ladies-racerback-tank",
                        "611f18c04bcc0c4fb37b5354",
                        "Harriet Tubman $20 Bill - Black and Gold (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-t-shirt",
                        "611f1903819f294fad237ade",
                        "Blackfacts Heroes - Purple and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-ladies-t-shirt",
                        "611f18b9903c816db29fb1cd",
                        "Harriet Tubman $20 Bill - Purple and Gold (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-t-shirt",
                        "611f18c04bcc0c4fb37b5354",
                        "Harriet Tubman $20 Bill - Black and Gold (on Black)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "next-level-ladies-racerback-tank",
                        "611f1903819f294fad237ade",
                        "Blackfacts Heroes - Purple and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f18f897a3362c2f5f223d",
                        "Harriet Tubman $20 Bill - Black and Gold (on White)",
                        "20.00"});
            table2.AddRow(new string[] {
                        "gildan-ultra-cotton-tank",
                        "611f18c04bcc0c4fb37b5354",
                        "Harriet Tubman $20 Bill - Black and Gold (on Black)",
                        "20.00"});
#line 5
 testRunner.Given("the Swag Catalog contains these products", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "designId",
                        "title",
                        "price"});
            table3.AddRow(new string[] {
                        "gildan-ultra-cotton-jank",
                        "611f187c903c816db29fb1c2",
                        "Invalid Product Id",
                        "20.00"});
#line 27
 testRunner.And("invalid products are listed here", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "size"});
            table4.AddRow(new string[] {
                        "sml"});
            table4.AddRow(new string[] {
                        "med"});
            table4.AddRow(new string[] {
                        "lrg"});
            table4.AddRow(new string[] {
                        "xlg"});
            table4.AddRow(new string[] {
                        "xxl"});
            table4.AddRow(new string[] {
                        "xxxl"});
            table4.AddRow(new string[] {
                        "xxxxl"});
            table4.AddRow(new string[] {
                        "xxxxxl"});
            table4.AddRow(new string[] {
                        "xxxxxxl"});
#line 30
 testRunner.And("products are available in these sizes", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "size"});
            table5.AddRow(new string[] {
                        "bad"});
#line 41
 testRunner.And("invalid product sizes are listed here", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "color"});
            table6.AddRow(new string[] {
                        "black"});
            table6.AddRow(new string[] {
                        "white"});
#line 44
 testRunner.And("products are available in these colors", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "color"});
            table7.AddRow(new string[] {
                        "invisible"});
#line 48
 testRunner.And("invalid product colors are listed here", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "address1",
                        "city",
                        "state",
                        "zip",
                        "country"});
            table8.AddRow(new string[] {
                        "Richard E Witt",
                        "3325 Half and Half Drive",
                        "Corcoran",
                        "CA",
                        "93212",
                        "US"});
            table8.AddRow(new string[] {
                        "Gary R Mendoza",
                        "2840 Harley Vincent Drive",
                        "Mesopotamia",
                        "OH",
                        "44439",
                        "US"});
            table8.AddRow(new string[] {
                        "William M Duvall",
                        "154 Pretty View Lane",
                        "Sebastopol",
                        "CA",
                        "95472",
                        "US"});
            table8.AddRow(new string[] {
                        "Justin R Reeser",
                        "4407 Brooke Street",
                        "Houston",
                        "TX",
                        "77002",
                        "US"});
            table8.AddRow(new string[] {
                        "Brenda F Hart",
                        "1683 Christie Way",
                        "Lexington",
                        "MA",
                        "02173",
                        "US"});
            table8.AddRow(new string[] {
                        "Eric L Mitchell",
                        "2570 Summit Street",
                        "Davenport",
                        "IA",
                        "52806",
                        "US"});
            table8.AddRow(new string[] {
                        "Joe T Dawkins",
                        "149 Goldcliff Circle",
                        "Washington",
                        "DC",
                        "20016",
                        "US"});
            table8.AddRow(new string[] {
                        "Billie F Buffington",
                        "1885 Virginia Street",
                        "Chicago",
                        "IL",
                        "60653",
                        "US"});
            table8.AddRow(new string[] {
                        "Lisa W Boss",
                        "1891 New Street",
                        "Madras",
                        "OR",
                        "97741",
                        "US"});
            table8.AddRow(new string[] {
                        "Howard S Davis",
                        "821 Langtown Road",
                        "Toledo",
                        "OH",
                        "43609",
                        "US"});
#line 51
 testRunner.And("our address book contains these addresses", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "address1",
                        "city",
                        "state",
                        "zip",
                        "country"});
            table9.AddRow(new string[] {
                        "Blackfacts.com",
                        "60 State St",
                        "Boston",
                        "MA",
                        "02210",
                        "US"});
#line 63
 testRunner.And("the custom label from address is", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "address1",
                        "city",
                        "state",
                        "zip",
                        "country"});
            table10.AddRow(new string[] {
                        "John Doe",
                        "123 Any Street",
                        "Anytown",
                        "MA",
                        "00000",
                        "US"});
#line 66
 testRunner.And("the invalid address book contains these addresses", ((string)(null)), table10, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Standard Quote With Single Product")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Standard Quote With Single Product")]
        [Xunit.TraitAttribute("Category", "standardquote")]
        public virtual void GenerateStandardQuoteWithSingleProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "standardquote"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Standard Quote With Single Product", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 72
 testRunner.Given("the first 1 products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
 testRunner.And("the quantity ordered is 1 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("the first 1 sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("the first 1 colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("the first 1 addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.When("a Standard Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.Then("the result should contain an Order Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Bulk Quote With Multiple Products To Same Address")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Bulk Quote With Multiple Products To Same Address")]
        [Xunit.TraitAttribute("Category", "bulkquote1")]
        public virtual void GenerateBulkQuoteWithMultipleProductsToSameAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "bulkquote1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Bulk Quote With Multiple Products To Same Address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 82
 testRunner.Given("the first 5 products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.And("the quantity ordered is 2 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("the first 5 sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.And("the first 2 colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("the first 1 addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.When("a Bulk Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.Then("the result should contain an Order Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Bulk Quote With Multiple Products To Different Addresses")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Bulk Quote With Multiple Products To Different Addresses")]
        [Xunit.TraitAttribute("Category", "bulkquote2")]
        public virtual void GenerateBulkQuoteWithMultipleProductsToDifferentAddresses()
        {
            string[] tagsOfScenario = new string[] {
                    "bulkquote2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Bulk Quote With Multiple Products To Different Addresses", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 92
 testRunner.Given("the first 5 products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
 testRunner.And("the quantity ordered is 2 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.And("the first 5 sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("the first 2 colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("the first 5 addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.When("a Bulk Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.Then("the result should contain an Order Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Bulk Quote With Multiple Products To Different Addresses And Custom Labe" +
            "ls")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Bulk Quote With Multiple Products To Different Addresses And Custom Labe" +
            "ls")]
        [Xunit.TraitAttribute("Category", "bulkquote3")]
        public virtual void GenerateBulkQuoteWithMultipleProductsToDifferentAddressesAndCustomLabels()
        {
            string[] tagsOfScenario = new string[] {
                    "bulkquote3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Bulk Quote With Multiple Products To Different Addresses And Custom Labe" +
                    "ls", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 102
 testRunner.Given("the first 5 products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
 testRunner.And("the quantity ordered is 2 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.And("the first 5 sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And("the first 2 colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("the first 1 addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And("the first 1 custom addresses is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.When("a Bulk Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
 testRunner.Then("the result should contain an Order Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Quote Error From Invalid Product")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Quote Error From Invalid Product")]
        [Xunit.TraitAttribute("Category", "quoteerror1")]
        public virtual void GenerateQuoteErrorFromInvalidProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "quoteerror1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Quote Error From Invalid Product", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 113
 testRunner.Given("the first 1 invalid products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
 testRunner.And("the quantity ordered is 1 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.And("the first 1 sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("the first 1 colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.And("the first 1 addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.When("a Standard Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.Then("the result should contain an Error Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Quote Error From Invalid Product Color")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Quote Error From Invalid Product Color")]
        [Xunit.TraitAttribute("Category", "quoteerror2")]
        public virtual void GenerateQuoteErrorFromInvalidProductColor()
        {
            string[] tagsOfScenario = new string[] {
                    "quoteerror2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Quote Error From Invalid Product Color", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 123
 testRunner.Given("the first 1 products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 124
 testRunner.And("the quantity ordered is 1 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.And("the first 1 sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("the first 1 invalid colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("the first 1 addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.When("a Standard Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.Then("the result should contain an Error Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Quote Error From Invalid Product Size")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Quote Error From Invalid Product Size")]
        [Xunit.TraitAttribute("Category", "quoteerror3")]
        public virtual void GenerateQuoteErrorFromInvalidProductSize()
        {
            string[] tagsOfScenario = new string[] {
                    "quoteerror3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Quote Error From Invalid Product Size", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 133
 testRunner.Given("the first 1 products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
 testRunner.And("the quantity ordered is 1 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
 testRunner.And("the first 1 invalid sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.And("the first 1 colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.And("the first 1 addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.When("a Standard Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
 testRunner.Then("the result should contain an Error Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Quote Error From Invalid Product Quantity")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Quote Error From Invalid Product Quantity")]
        [Xunit.TraitAttribute("Category", "quoteerror4")]
        public virtual void GenerateQuoteErrorFromInvalidProductQuantity()
        {
            string[] tagsOfScenario = new string[] {
                    "quoteerror4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Quote Error From Invalid Product Quantity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 143
 testRunner.Given("the first 1 products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 144
 testRunner.And("the quantity ordered is -1 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.And("the first 1 sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("the first 1 colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And("the first 1 addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.When("a Standard Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.Then("the result should contain an Error Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Quote Error From Invalid Address")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteAPITests")]
        [Xunit.TraitAttribute("Description", "Generate Quote Error From Invalid Address")]
        [Xunit.TraitAttribute("Category", "quoteerror5")]
        public virtual void GenerateQuoteErrorFromInvalidAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "quoteerror5"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Quote Error From Invalid Address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 152
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 153
 testRunner.Given("the first 1 products are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 154
 testRunner.And("the quantity ordered is 1 each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.And("the first 1 sizes are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.And("the first 1 colors are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.And("the first 1 invalid addresses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.When("a Standard Quote is generated with this data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 159
 testRunner.Then("the result should contain an Error Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                QuoteAPITestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                QuoteAPITestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
